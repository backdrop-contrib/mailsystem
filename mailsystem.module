<?php

/**
 * @file
 * Provide UI for controlling the mail_system variable.
 */

/**
 * Implements hook_config_info().
 */
function mailsystem_config_info() {
  $prefixes['mailsystem.settings'] = array(
    'label' => t('mailsystem settings'),
    'group' => t('mailsystem'),
  );
  return $prefixes;
}  
 
/**
 * Implements hook_init().
 *
 * Caches the list of MailSystemInterface classes, and removes classes
 * from the mail_system variable which are no longer available.
 *
 * @see mailsystem_get_classes()
 */
function mailsystem_init() {
  mailsystem_get_classes();
  // @todo Remove this when issue #299138 gets resolved.
  if (!function_exists('mailsystem_html_to_text')) {
    module_load_include('inc', 'mailsystem', 'html_to_text');
  }
}

/**
 * Implements hook_permission().
 *
 * Defines a permission for managing the mail_system variable.
 */
function mailsystem_permission() {
  return array(
    'administer mailsystem' => array(
      'title' => t('Administer Mail System'),
      'description' => t(
        'Select the default, per-module, and per-mailing <a href="!interface"><code>@interface</code></a> to use for formatting and sending email messages.',
        array(
          '!interface' => url('http://api.drupal.org/api/drupal/includes--mail.inc/interface/MailSystemInterface/7'),
          '@interface' => 'MailSystemInterface',
        )
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mailsystem_menu() {
  $items['admin/config/system/mailsystem'] = array(
    'title' => 'Mail System',
    'description' => 'Configure per-module Mail System settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('mailsystem_admin_settings'),
    'access arguments' => array('administer mailsystem'),
    'file' => 'mailsystem.admin.inc',
  );
  return $items;
}

/**
 * Returns the id for the default mail_system setting.
 */
function mailsystem_default_id() {
  // @todo: Is there a way to get this from core?
  return 'default-system';
}

/**
 * Returns the value for the default mail_system setting.
 */
function mailsystem_default_value() {
  // @todo: Is there a way to get this from core?
  return 'DefaultMailSystem';
}

/**
 * Returns the default settings for the mail_system variable.
 */
function mailsystem_defaults() {
  return array(mailsystem_default_id() => mailsystem_default_value());
}

/**
 * Returns the current mail_system settings.
 * 
 * @return The contents of the mail_system variable merged with its defaults.
 */
function mailsystem_get() {
  
  $mail_settings = config_get('mailsystem.settings', 'mail_system') ?: array();
  return array_merge(
    mailsystem_defaults(),
  $mail_settings  
  );
}

/**
 * Returns the default list of MailSystemInterface methods.
 *
 * @return
 *   An array whose keys are the names of the methods defined by
 *   MailSystemInterface and whose values are the default class used to
 *   provide that method.
 */
function mailsystem_default_methods() {
  $mail_system = mailsystem_get();
  $default_class = $mail_system[mailsystem_default_id()];
  $methods = get_class_methods('MailSystemInterface');
  return array_combine(
    $methods,
    array_fill(0, count($methods), $default_class)
  );
}

/**
 * Creates and registers a new MailSystemInterface class.
 *
 * The newly-created class gets its name and each of its class methods from the
 * other classes specified by the $class parameter.
 *
 * @param $class An associative array of ($method_name => $class_name) tuples,
 * where each $method_name is the name of a class method to be created, and
 * each $class_name is the name of a class to use for that method.
 *
 * @return
 *   The name of the newly-created class if successful; otherwise FALSE.
 */
function mailsystem_create_class($classes) {
  // Merge in defaults.
  $classes += mailsystem_default_methods();
  ksort($classes);
  // Do not create a new class whose methods all derive from the same class.
  if (count(array_unique($classes)) === 1) {
    return FALSE;
  }
  $class_name = implode('__', $classes);
  // Ensure that the mailsystem directory exists.
  $class_dir = file_build_uri('mailsystem');
  if (!file_prepare_directory($class_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    return FALSE;
  }
  // Build the class filename.
  $class_file = backdrop_realpath($class_dir) . DIRECTORY_SEPARATOR . "$class_name.mail.inc";
  // Strip DRUPAL_ROOT.
  $backdrop_root = backdrop_realpath(BACKDROP_ROOT) . DIRECTORY_SEPARATOR;
  $class_file = preg_replace('#^' . preg_quote($backdrop_root, '#') . '#', '', $class_file);
  // Build the class implementation as a string.
  $class_contents = '<?php
class ' . $class_name . ' implements MailSystemInterface {';
  // Create a protected variable to hold each method class.
  foreach (array_keys($classes) as $method) {
    $class_contents .= '
  protected $' . $method . 'Class;';
  }
  // Create a class construction function to populate the variables.
  $class_contents .= '
  public function __construct() {';
  foreach ($classes as $method => $class) {
    $class_contents .= '
    if (backdrop_autoload_class(\'' . $class . '\')) {
      $this->' . $method . 'Class = new ' . $class . ';
    }
    else {
      $this->' . $method . 'Class = new ' . mailsystem_default_value() . ';
    }';
  }
  $class_contents .= '
  }';
  // Create each class method.
  foreach (array_keys($classes) as $method) {
    $class_contents .= '
  public function ' . $method . '(array $message) {
    return $this->' . $method . 'Class->' . $method . '($message);
  }';
  }
  $class_contents .= '
}
';
  if (file_unmanaged_save_data($class_contents, $class_file, FILE_EXISTS_REPLACE)) {
    // Remove any conflicting registry entries to avoid a database error.
    $class_condition = db_and()
      ->condition('name', $class_name)
      ->condition('type', 'class');
    $file_condition = db_and()
      ->condition('filename', $class_file);
    db_delete('registry_file')
      ->condition($file_condition);
    db_delete('registry')->condition(
      db_or()->condition($class_condition)
      ->condition($file_condition)
    );
    // Make sure that registry functions are available.
    require_once 'includes/registry.inc';
    // Parse the newly-created class file and add it to the registry.
    _registry_parse_file($class_file, $class_contents, 'mailsystem');
    // Clear the mailsystem cache so that it will pick up the new class.
    backdrop_static_reset('mailsystem_get_classes');
    backdrop_set_message(
      t('Class <code>%class</code> written to <code>%file</code>.',
        array('%class' => $class_name, '%file' => $class_file)
      )
    );
  }
  return $class_name;
}

/**
 * Helps other modules safely set their own key within mail_system.  This
 * function should be called from hook_enable() implementations.
 *
 * @param $setting  An associative array ($id => $value) where:
 *   - $id is the machine-readable module name optionally followed by '_'
 *     and a key.
 *   - $value is one of
 *     - (string) The name of a class that implements MailSystemInterface.
 *     - (array) An associative array whose keys are the names of methods
 *       defined by MailSystemInterface and whose values are the names of
 *       the class to use for that method.
 *
 * @see backdrop_mail(), mailsystem_default_methods()
 */
function mailsystem_set(array $setting) {
  $mail_system = mailsystem_get();
  foreach ($setting as $key => $class) {
    if (is_array($class)) {
      unset($setting[$key]);
      if ($new_class = mailsystem_create_class($class)) {
        $setting[$key] = $new_class;
      }
    }
  }
  config_set('mailsystem.settings', 'mail_system', array_merge(mailsystem_get(), $setting));
}

/**
 * Helps other modules safely remove their settings from mail_system.  This
 * function should be called from the other module's hook_disable() function.
 *
 * @param $setting  An associative array ($module => $classname) describing
 * a module and associated MailSystemInterface class that are being disabled.
 *   - $module is the machine-readable module name.
 *   - $classname is a class that implements MailSystemInterface.
 *
 * If $classname is empty, only the $module entry is removed.
 *
 * @param $class
 *   The name of the class to be removed, if any.
 */
function mailsystem_clear(array $setting) {
  config_set('mailsystem.settings',
    'mail_system',
    array_merge(
      mailsystem_defaults(),
      array_diff_key(array_diff(mailsystem_get(), $setting), $setting)
    )
  );
}

/**
* Returns a list of classes which implement MailSystemInterface.
*/
function &mailsystem_get_classes() {
  $mailsystem_classes = array();
  $mail_classes = array();
    
  // Backdrop solution from https://github.com/backdrop-contrib/mailsystem/issues/1
  foreach (module_implements('autoload_info') as $module) {
    $function = $module . '_autoload_info';
    if($module){$modulepath = BACKDROP_ROOT.'/'.backdrop_get_path('module',$module);}
    $implements = $function();
    foreach($implements as $classname => $path) {
      if(strpos($classname, 'MailSystem') and !strpos($classname, 'Delegate')) {
        $mail_classes[$classname] = $modulepath.'/'.$path;
      }
    }
  }
  // use a config setting for current mail options
	$mail_system_options = array();
	foreach($mail_classes as $class=>$path){
		$mail_system_options[$class] = $class;
	}
	config_set('mailsystem.settings','mail_system_options',$mail_system_options);
  // now check whether we already have each class listed in config
  // if not, add it as a default and load it
  // also, check that those listed in config do still exist
  $config_classes = config_get('mailsystem.settings','mail_system');
  $all_classes = array();
  foreach ($mail_classes as $classname => $classfile) {
    if(empty($config_classes[$classname])){
      // needs to be added to config
      // add to array $all_classes
      if ( file_exists($classfile)) {
        $all_classes[$classname] = 1;
      }
    }else{
      // add existing class to $mailsystem_classes
      $mailsystem_classes[$classname] = $classname;
    }
  }
  // now process those to be added
  foreach ($all_classes as $classname => $autoload) {
    if ($autoload == 1) {
      $mailsystem_classes[$classname] = 'DefaultMailSystem';
    }
  }
  // now check for missing classes
  if(is_array($config_classes)){
    foreach ($config_classes as $classname) {
      if (!class_exists($classname)) {
        $mailsystem_classes[$classname] = "";
      }
    }
  }
  ksort($mailsystem_classes);
  config_set('mailsystem.settings','mail_system',$mailsystem_classes);
  return $mailsystem_classes;
}


/**
* Implements hook_theme_registry_alter().
*/
function mailsystem_theme_registry_alter(&$theme_registry) {
  module_load_include('inc', 'mailsystem', 'mailsystem.theme');
  return mailsystem_theme_theme_registry_alter($theme_registry);
}

/**
* Retrieves the key of the theme used to render the emails.
*
* @todo Add some kind of hook to let other modules alter this behavior.
*/
function mailsystem_get_mail_theme() {
  global $theme_key;
  $theme = config_get('mailsystem.settings', 'mailsystem_theme');
  switch ($theme) {
    case 'default':
      $theme = config_get('system.core','theme_default');
      break;
    case 'current':
      $theme = $theme_key;
      break;
    case 'domain':
      // Fetch the theme for the current domain.
      if (module_exists('domain_theme')) {
        // Assign the selected theme, based on the active domain.
        global $_domain;
        $domain_theme = domain_theme_lookup($_domain['domain_id']);
        // The above returns -1 on failure.
        $theme = ($domain_theme != -1) ? $domain_theme['theme'] : $theme_key;
      }
      break;
  }
  return $theme;
}
