<?php

/**
 * @file
 * Provide UI for controlling the mail_system variable.
 */

/**
 * Implements hook_init().
 *
 * Caches the list of MailSystemInterface classes, and removes classes
 * from the mail_system variable which are no longer available.
 *
 * @see mailsystem_get_classes()
 */
function mailsystem_init() {
  mailsystem_get_classes();
  // @todo Remove this when issue #299138 gets resolved.
  if (!function_exists('mailsystem_html_to_text')) {
    module_load_include('inc', 'mailsystem', 'html_to_text');
  }
}

/**
 * Implements hook_permission().
 *
 * Defines a permission for managing the mail_system variable.
 */
function mailsystem_permission() {
  return array(
    'administer mailsystem' => array(
      'title' => t('Administer Mail System'),
      'description' => t(
        'Select the default, per-module, and per-mailing <a href="!interface"><code>@interface</code></a> to use for formatting and sending email messages.',
        array(
          '!interface' => url('http://api.drupal.org/api/drupal/includes--mail.inc/interface/MailSystemInterface/7'),
          '@interface' => 'MailSystemInterface',
        )
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mailsystem_menu() {
  $items['admin/config/system/mailsystem'] = array(
    'title' => 'Mail System',
    'description' => 'Configure per-module Mail System settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailsystem_admin_settings'),
    'access arguments' => array('administer mailsystem'),
    'file' => 'mailsystem.admin.inc',
  );
  return $items;
}

/**
 * Returns the id for the default mail_system setting.
 */
function mailsystem_default_id() {
  // @todo: Is there a way to get this from core?
  return 'default-system';
}

/**
 * Returns the value for the default mail_system setting.
 */
function mailsystem_default_value() {
  // @todo: Is there a way to get this from core?
  return 'DefaultMailSystem';
}

/**
 * Returns the default settings for the mail_system variable.
 */
function mailsystem_defaults() {
  return array(mailsystem_default_id() => mailsystem_default_value());
}

/**
 * Returns the current mail_system settings.
 *
 * @return The contents of the mail_system variable merged with its defaults.
 */
function mailsystem_get() {
  return array_merge(
    mailsystem_defaults(),
    variable_get('mail_system', mailsystem_defaults())
  );
}


/**
 * Helps other modules safely set their own key within mail_system.  This
 * function should be called from hook_enable() implementations.
 *
 * @param $setting  An associative array ($id => $value) where:
 *   - $id is the machine-readable module name optionally followed by '_'
 *     and a key.
 *   - $value is one of
 *     - (string) The name of a class that implements MailSystemInterface.
 *     - (array) An associative array whose keys are the names of methods
 *       defined by MailSystemInterface and whose values are the names of
 *       the class to use for that method.
 *
 * @see drupal_mail()
 */
function mailsystem_set(array $setting) {
  $mail_system = mailsystem_get();
  foreach ($setting as $key => $class) {
    variable_del("mailsystem_delegate:$key");
    if (is_array($class)) {
      // Save the settings for our delegateer-class into a variable
      $setting[$key] = mailsystem_delegate_set_mailsystem_settings($key, $class);
    }
  }
  variable_set('mail_system', array_merge(mailsystem_get(), $setting));
}

/**
 * Helps other modules safely remove their settings from mail_system.  This
 * function should be called from the other module's hook_disable() function.
 *
 * @param $setting  An associative array ($module => $classname) describing
 * a module and associated MailSystemInterface class that are being disabled.
 *   - $module is the machine-readable module name.
 *   - $classname is a class that implements MailSystemInterface.
 *
 * If $classname is empty, only the $module entry is removed.
 *
 * @param $class
 *   The name of the class to be removed, if any.
 */
function mailsystem_clear(array $setting) {
  variable_set(
    'mail_system',
    array_merge(
      mailsystem_defaults(),
      array_diff_key(array_diff(mailsystem_get(), $setting), $setting)
    )
  );
  foreach (array_keys($setting) as $key) {
    variable_del("mailsystem_delegate:$key");
  }
}

/**
 * Save settings for the delegate mail system for a given mail-id.
 *
 * @param $id is the machine-readable module name optionally followed by '_'
 *       and a key.
 * @param $map An associative array whose keys are the names of methods
 *       defined by MailSystemInterface and whose values are the names of
 *       the class to use for that method.
 *
 * @return A string specifying the name of the delegator class.
 */
function mailsystem_delegate_set_mailsystem_settings($id, $settings) {
  variable_set('mailsystem_delegate:' . $id, $settings);
  return 'MailsystemDelegateMailSystem';
}

/**
 * Returns an MailSystemInterface class instance for a given action.
 *
 *  of a class implementing the MailSystemInterface
 * responsible for performing the given action.
 *
 * @param string $module
 *   The machine-readable module name.
 * @param string $key
 *   The email key.
 * @param string $action
 *   The name of the MailSystemInterface method to be invoked. Should be one of:
 *   - format: Format a message composed by drupal_mail() prior to sending.
 *   - mail: Send a message composed by drupal_mail().
 *
 * @return MailSystemInterface
 *
 * @see drupal_mail_system().
 */
function _mailsystem_delegate_get_mailsystem($module, $key, $action) {
  $instances = &drupal_static(__FUNCTION__, array());

  $settings = variable_get('mailsystem_delegate:' . $module . '_' . $key);
  if ($settings === NULL) {
    $settings = variable_get('mailsystem_delegate:' . $module);
  }

  // Use the class configured for the given action.
  if ($settings && isset($settings[$action])) {
    $class = $settings[$action];
  }
  else {
    $mailsystems = mailsystem_get();
    $class = $mailsystems[mailsystem_default_id()];

    // Fallback to drupal default in order to prevent an infinite recursion.
    if ($class == 'MailsystemDelegateMailSystem') {
      $class = mailsystem_default_value();
    }
  }

  if (empty($instances[$class])) {
    $interfaces = class_implements($class);
    if (isset($interfaces['MailSystemInterface'])) {
      $instances[$class] = new $class();
    }
    else {
      throw new Exception(t('Class %class does not implement interface %interface', array('%class' => $class, '%interface' => 'MailSystemInterface')));
    }
  }
  return $instances[$class];
}

/**
 * Returns a list of classes which implement MailSystemInterface.
 */
function &mailsystem_get_classes() {
  $mailsystem_classes = &drupal_static(__FUNCTION__);
  if (!isset($mailsystem_classes)) {
    $mailsystem_classes = array();
    // @todo Is there a better way to find all mail-related classes?
    $declared_classes = get_declared_classes();
    $all_classes = array_combine(
      $declared_classes,
      array_fill(0, count($declared_classes), 0)
    );
    $mail_classes = db_select('registry', 'registry')
      ->distinct()
      ->fields('registry', array('name', 'filename'))
      ->where("type=:type AND ( filename like :filename OR name like :name )",
        // Making the HUGE assumption that all classes which implement
        // MailSystemInterface have filenames containing '.mail.' or
        // classnames ending in 'MailSystem'.
        array(
          ':type' => 'class',
          ':name' => '%MailSystem',
          ':filename' => '%.mail.%',
        )
      )
      ->execute()
      ->fetchAllKeyed();
    foreach ($mail_classes as $classname => $classfile) {
      if ( file_exists($classfile)
        && drupal_autoload_class($classname)
      ) {
        $all_classes[$classname] = 1;
      }
    }
    foreach ($all_classes as $classname => $autoload) {
      if ( ($autoload || preg_match('/MailSystem/', $classname))
        && ($object = new $classname)
        && ($object instanceof MailSystemInterface)
      ) {
        $mailsystem_classes[$classname] = $classname;
      }
      elseif ($autoload) {
        // Clear classes that are no longer available.
        db_delete('registry')
          ->condition('name', $classname)
          ->execute();
      }
    }
    foreach (array_unique(mailsystem_get()) as $classname) {
      if (class_exists($classname)) {
        $mailsystem_classes[$classname] = $classname;
      }
      else {
        mailsystem_clear(array(mailsystem_default_id() => $classname));
      }
    }
    ksort($mailsystem_classes);
  }
  return $mailsystem_classes;
}

/**
* Implements hook_theme_registry_alter().
*/
function mailsystem_theme_registry_alter(&$theme_registry) {
  module_load_include('inc', 'mailsystem', 'mailsystem.theme');
  return mailsystem_theme_theme_registry_alter($theme_registry);
}

/**
* Retrieves the key of the theme used to render the emails.
*
* @todo Add some kind of hook to let other modules alter this behavior.
*/
function mailsystem_get_mail_theme() {
  global $theme_key;
  $theme = variable_get('mailsystem_theme', 'current');
  switch ($theme) {
    case 'default':
      $theme = variable_get('theme_default', NULL);
      break;
    case 'current':
      $theme = $theme_key;
      break;
    case 'domain':
      // Fetch the theme for the current domain.
      if (module_exists('domain_theme')) {
        // Assign the selected theme, based on the active domain.
        global $_domain;
        $domain_theme = domain_theme_lookup($_domain['domain_id']);
        // The above returns -1 on failure.
        $theme = ($domain_theme != -1) ? $domain_theme['theme'] : $theme_key;
      }
      break;
  }
  return $theme;
}
